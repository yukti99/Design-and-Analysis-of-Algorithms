// N Queen's Problem 

#include <bits/stdc++.h>
using namespace std;


char grid[11][11];
int n;


bool isSafe(int row,int col){
	int i,j;
	// checking col
	for(i=0;i<row;i++){
		if (grid[i][col] == 'Q')
			return false;
	}
	// checking upper left diagonal
	for(i=row,j=col;i>=0 && j>=0;i--,j--){
		if (grid[i][j] == 'Q')
			return false;
	}
	// checking upper right diagonal
	for(i=row,j=col;i>=0 && j<n;i--,j++){
		if (grid[i][j] == 'Q')
			return false;
	}
	return true;
}
void NQueen(int row){
	if (row>=n){
		cout<<"[";
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if (grid[i][j] == 'Q')
					cout<<j+1<<" ";
			}
		}
		cout<<"] ";		
		return ;	
	}
	for(int i=0;i<n;i++){
		if (isSafe(row,i)){
			grid[row][i] = 'Q';
			NQueen(row+1);
			grid[row][i] = '0';
		}
			
	}	

}
void printSol(int n){
	if (n==1){
		cout<<"[1 ]"<<endl;
		return ;
	}
	if (n==2 || n==3){
		cout<<-1<<endl;
		return ;
	}
	NQueen(0);
	
}
int main() {
	int t;
	cin>>t;
	while(t--){
		cin>>n;
		memset(grid,'0',sizeof(grid));
		printSol(n);
	}	
	return 0;
}





/*

[1 ]
-1
[2 4 1 3 ] [3 1 4 2 ] 
[1 5 8 6 3 7 2 4 ] [1 6 8 3 7 4 2 5 ] [1 7 4 6 8 2 5 3 ] [1 7 5 8 2 4 6 3 ] [2 4 6 8 3 1 7 5 ] [2 5 7 1 3 8 6 4 ] [2 5 7 4 1 8 6 3 ] [2 6 1 7 4 8 3 5 ] [2 6 8 3 1 4 7 5 ] [2 7 3 6 8 5 1 4 ] [2 7 5 8 1 4 6 3 ] [2 8 6 1 3 5 7 4 ] [3 1 7 5 8 2 4 6 ] [3 5 2 8 1 7 4 6 ] [3 5 2 8 6 4 7 1 ] [3 5 7 1 4 2 8 6 ] [3 5 8 4 1 7 2 6 ] [3 6 2 5 8 1 7 4 ] [3 6 2 7 1 4 8 5 ] [3 6 2 7 5 1 8 4 ] [3 6 4 1 8 5 7 2 ] [3 6 4 2 8 5 7 1 ] [3 6 8 1 4 7 5 2 ] [3 6 8 1 5 7 2 4 ] [3 6 8 2 4 1 7 5 ] [3 7 2 8 5 1 4 6 ] [3 7 2 8 6 4 1 5 ] [3 8 4 7 1 6 2 5 ] [4 1 5 8 2 7 3 6 ] [4 1 5 8 6 3 7 2 ] [4 2 5 8 6 1 3 7 ] [4 2 7 3 6 8 1 5 ] [4 2 7 3 6 8 5 1 ] [4 2 7 5 1 8 6 3 ] [4 2 8 5 7 1 3 6 ] [4 2 8 6 1 3 5 7 ] [4 6 1 5 2 8 3 7 ] [4 6 8 2 7 1 3 5 ] [4 6 8 3 1 7 5 2 ] [4 7 1 8 5 2 6 3 ] [4 7 3 8 2 5 1 6 ] [4 7 5 2 6 1 3 8 ] [4 7 5 3 1 6 8 2 ] [4 8 1 3 6 2 7 5 ] [4 8 1 5 7 2 6 3 ] [4 8 5 3 1 7 2 6 ] [5 1 4 6 8 2 7 3 ] [5 1 8 4 2 7 3 6 ] [5 1 8 6 3 7 2 4 ] [5 2 4 6 8 3 1 7 ] [5 2 4 7 3 8 6 1 ] [5 2 6 1 7 4 8 3 ] [5 2 8 1 4 7 3 6 ] [5 3 1 6 8 2 4 7 ] [5 3 1 7 2 8 6 4 ] [5 3 8 4 7 1 6 2 ] [5 7 1 3 8 6 4 2 ] [5 7 1 4 2 8 6 3 ] [5 7 2 4 8 1 3 6 ] [5 7 2 6 3 1 4 8 ] [5 7 2 6 3 1 8 4 ] [5 7 4 1 3 8 6 2 ] [5 8 4 1 3 6 2 7 ] [5 8 4 1 7 2 6 3 ] [6 1 5 2 8 3 7 4 ] [6 2 7 1 3 5 8 4 ] [6 2 7 1 4 8 5 3 ] [6 3 1 7 5 8 2 4 ] [6 3 1 8 4 2 7 5 ] [6 3 1 8 5 2 4 7 ] [6 3 5 7 1 4 2 8 ] [6 3 5 8 1 4 2 7 ] [6 3 7 2 4 8 1 5 ] [6 3 7 2 8 5 1 4 ] [6 3 7 4 1 8 2 5 ] [6 4 1 5 8 2 7 3 ] [6 4 2 8 5 7 1 3 ] [6 4 7 1 3 5 2 8 ] [6 4 7 1 8 2 5 3 ] [6 8 2 4 1 7 5 3 ] [7 1 3 8 6 4 2 5 ] [7 2 4 1 8 5 3 6 ] [7 2 6 3 1 4 8 5 ] [7 3 1 6 8 5 2 4 ] [7 3 8 2 5 1 6 4 ] [7 4 2 5 8 1 3 6 ] [7 4 2 8 6 1 3 5 ] [7 5 3 1 6 8 2 4 ] [8 2 4 1 7 5 3 6 ] [8 2 5 3 1 7 4 6 ] [8 3 1 6 2 5 7 4 ] [8 4 1 3 6 2 7 5 ] 




[1 ] 
-1
[2 4 1 3 ] [3 1 4 2 ] 
[1 5 8 6 3 7 2 4 ] [1 6 8 3 7 4 2 5 ] [1 7 4 6 8 2 5 3 ] [1 7 5 8 2 4 6 3 ] [2 4 6 8 3 1 7 5 ] [2 5 7 1 3 8 6 4 ] [2 5 7 4 1 8 6 3 ] [2 6 1 7 4 8 3 5 ] [2 6 8 3 1 4 7 5 ] [2 7 3 6 8 5 1 4 ] [2 7 5 8 1 4 6 3 ] [2 8 6 1 3 5 7 4 ] [3 1 7 5 8 2 4 6 ] [3 5 2 8 1 7 4 6 ] [3 5 2 8 6 4 7 1 ] [3 5 7 1 4 2 8 6 ] [3 5 8 4 1 7 2 6 ] [3 6 2 5 8 1 7 4 ] [3 6 2 7 1 4 8 5 ] [3 6 2 7 5 1 8 4 ] [3 6 4 1 8 5 7 2 ] [3 6 4 2 8 5 7 1 ] [3 6 8 1 4 7 5 2 ] [3 6 8 1 5 7 2 4 ] [3 6 8 2 4 1 7 5 ] [3 7 2 8 5 1 4 6 ] [3 7 2 8 6 4 1 5 ] [3 8 4 7 1 6 2 5 ] [4 1 5 8 2 7 3 6 ] [4 1 5 8 6 3 7 2 ] [4 2 5 8 6 1 3 7 ] [4 2 7 3 6 8 1 5 ] [4 2 7 3 6 8 5 1 ] [4 2 7 5 1 8 6 3 ] [4 2 8 5 7 1 3 6 ] [4 2 8 6 1 3 5 7 ] [4 6 1 5 2 8 3 7 ] [4 6 8 2 7 1 3 5 ] [4 6 8 3 1 7 5 2 ] [4 7 1 8 5 2 6 3 ] [4 7 3 8 2 5 1 6 ] [4 7 5 2 6 1 3 8 ] [4 7 5 3 1 6 8 2 ] [4 8 1 3 6 2 7 5 ] [4 8 1 5 7 2 6 3 ] [4 8 5 3 1 7 2 6 ] [5 1 4 6 8 2 7 3 ] [5 1 8 4 2 7 3 6 ] [5 1 8 6 3 7 2 4 ] [5 2 4 6 8 3 1 7 ] [5 2 4 7 3 8 6 1 ] [5 2 6 1 7 4 8 3 ] [5 2 8 1 4 7 3 6 ] [5 3 1 6 8 2 4 7 ] [5 3 1 7 2 8 6 4 ] [5 3 8 4 7 1 6 2 ] [5 7 1 3 8 6 4 2 ] [5 7 1 4 2 8 6 3 ] [5 7 2 4 8 1 3 6 ] [5 7 2 6 3 1 4 8 ] [5 7 2 6 3 1 8 4 ] [5 7 4 1 3 8 6 2 ] [5 8 4 1 3 6 2 7 ] [5 8 4 1 7 2 6 3 ] [6 1 5 2 8 3 7 4 ] [6 2 7 1 3 5 8 4 ] [6 2 7 1 4 8 5 3 ] [6 3 1 7 5 8 2 4 ] [6 3 1 8 4 2 7 5 ] [6 3 1 8 5 2 4 7 ] [6 3 5 7 1 4 2 8 ] [6 3 5 8 1 4 2 7 ] [6 3 7 2 4 8 1 5 ] [6 3 7 2 8 5 1 4 ] [6 3 7 4 1 8 2 5 ] [6 4 1 5 8 2 7 3 ] [6 4 2 8 5 7 1 3 ] [6 4 7 1 3 5 2 8 ] [6 4 7 1 8 2 5 3 ] [6 8 2 4 1 7 5 3 ] [7 1 3 8 6 4 2 5 ] [7 2 4 1 8 5 3 6 ] [7 2 6 3 1 4 8 5 ] [7 3 1 6 8 5 2 4 ] [7 3 8 2 5 1 6 4 ] [7 4 2 5 8 1 3 6 ] [7 4 2 8 6 1 3 5 ] [7 5 3 1 6 8 2 4 ] [8 2 4 1 7 5 3 6 ] [8 2 5 3 1 7 4 6 ] [8 3 1 6 2 5 7 4 ] [8 4 1 3 6 2 7 5 ] 


If you have purchased any course from GeeksforGeeks then please ask your doubt on course discussion forum. You will get quick replies from GFG Moderators there.

*/
